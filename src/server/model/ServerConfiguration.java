package server.model;

import java.io.IOException;
import java.net.*;
import server.exceptions.StandardServerException;

/**
 * Class that handle server configuration
 * @author Janusz Czornik
 * @version 1.0
 */

@SuppressWarnings("unused")
public class ServerConfiguration {
    /**
     * Server address (cannot be changed)
     */
    
    private static final String HOST = "localhost";
    /**
     * Contains server status {runnting | not running}
     */
    private String serverStatus;
    /**
     * Arguments passed to the constructor
     */
    private final String[] args;
    /**
     * Port number for server
     */
    private int port;
    /**
     * Socket that handling comunication
     */
    private ServerSocket serverSocket;
    /**
     * Variable running new thread that start to listen on ServerSocket
     */
    private ListeningForConnection listener;
    
    
    
    /**
     * Constructor for ServerConfiguration class. Setting serverStatus to not running
     * @param args should be arguments passed to Main method
     */
    public ServerConfiguration(String[] args) {
        this.args = args;
        serverStatus = "not running";
    }
    
    /**
     * Function starts listening on given port if something goes wrong throws StandardServerException or IOException
     * @throws StandardServerException Exceptions generated by server
     * @throws IOException another exceptions
     */
    public void startServer() throws StandardServerException, IOException {
        port = Integer.parseInt(args[0]);
        if(port < 1 || port > 65535) {
            throw new StandardServerException("Wrong port number. Cannot start server!", StandardServerException.ErrorCode.WRONG_PORT_NO);
        }
        
        else {
            if(serverSocket != null && listener == null)
                throw new StandardServerException("Server is running!", StandardServerException.ErrorCode.SERVER_RUNNING);
            serverSocket = new ServerSocket(port);
            listener = new ListeningForConnection(serverSocket);
            listener.start();
            
            setServerStatus("running");
        }
    }
    
    /**
     * Stops the server. Is closing all sockets and writing to serverStatus that servers stops
     * @throws StandardServerException for terminate
     * @throws IOException for terminate
     * @throws InterruptedException for join
     */
    public void stopServer() throws StandardServerException, IOException, InterruptedException {
        if(serverSocket != null) {
            listener.terminate();
            listener.join();
            listener = null;
            serverSocket = null;
            serverStatus = "not running";
        }
        
        else
            throw new StandardServerException("Server is not running!", StandardServerException.ErrorCode.SERVER_NOT_RUNNING);
    }
    
    /**
     * Sets the port
     * @param port number of port
     */
    public void setPort(int port) {
        this.port = port;
    }
    
    /**
     * Get port number
     * @return port number
     */
    public int getPort() {
        return port;
    }
    
    /**
     * Returns server status
     * @return server status
     */
    public String getServerStatus() {
        return serverStatus;
    }
    
    /**
     * Setting server status
     * @param serverStatus sting to write in serverStatus
     */
    public void setServerStatus(String serverStatus) {
        this.serverStatus = serverStatus;
    }   
}